apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts
  labels:
    app: sock-shop
    svc: carts
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sock-shop
      svc: carts
  template:
    metadata:
      labels:
        app: sock-shop
        svc: carts
    spec:
      containers:
      - name: carts
        image: weaveworksdemos/carts:0.4.8
        env:
         - name: JAVA_OPTS
           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
        resources:
          #limits:
          #  cpu: 300m
          #  memory: 500Mi
          requests:
            cpu: 100m
            memory: 200Mi
        ports:
        - containerPort: 80
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
              - all
            add:
              - NET_BIND_SERVICE
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: carts
  annotations:
    prometheus.io/scrape: 'false'
  labels:
    app: sock-shop
    svc: carts
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    app: sock-shop
    svc: carts
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts-db
  labels:
    app: sock-shop
    svc: carts-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sock-shop
      svc: carts-db
  template:
    metadata:
      labels:
        app: sock-shop
        svc: carts-db
    spec:
      containers:
      - name: carts-db
        image: mongo
        ports:
        - name: mongo
          containerPort: 27017
        securityContext:
          capabilities:
            drop:
              - all
            add:
              - CHOWN
              - SETGID
              - SETUID
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: carts-db
  labels:
    app: sock-shop
    svc: carts-db
spec:
  ports:
    # the port that this service should serve on
  - port: 27017
    targetPort: 27017
  selector:
    app: sock-shop
    svc: carts-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue
  labels:
    app: sock-shop
    svc: catalogue
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sock-shop
      svc: catalogue
  template:
    metadata:
      labels:
        app: sock-shop
        svc: catalogue
    spec:
      containers:
      - name: catalogue
        image: weaveworksdemos/catalogue:0.3.5
        command: ["/app"]
        args:
        - -port=80
        resources:
          #limits:
          #  cpu: 200m
          #  memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 80
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
              - all
            add:
              - NET_BIND_SERVICE
          readOnlyRootFilesystem: true
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 3
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: catalogue
  annotations:
    prometheus.io/scrape: 'false'
  labels:
    app: sock-shop
    svc: catalogue
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    app: sock-shop
    svc: catalogue
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue-db
  labels:
    app: sock-shop
    svc: catalogue-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sock-shop
      svc: catalogue-db
  template:
    metadata:
      labels:
        app: sock-shop
        svc: catalogue-db
    spec:
      containers:
      - name: catalogue-db
        image: weaveworksdemos/catalogue-db:0.3.0
        env:
          - name: MYSQL_ROOT_PASSWORD
            value: fake_password
          - name: MYSQL_DATABASE
            value: socksdb
        ports:
        - name: mysql
          containerPort: 3306
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: catalogue-db
  labels:
    app: sock-shop
    svc: catalogue-db
spec:
  ports:
    # the port that this service should serve on
  - port: 3306
    targetPort: 3306
  selector:
    app: sock-shop
    svc: catalogue-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: front-end
  labels:
    app: sock-shop
    svc: front-end
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sock-shop
      svc: front-end
  template:
    metadata:
      labels:
        app: sock-shop
        svc: front-end
    spec:
      containers:
      - name: front-end
        image: weaveworksdemos/front-end:0.3.12
        resources:
          #limits:
          #  cpu: 300m
          #  memory: 1000Mi
          requests:
            cpu: 100m
            memory: 300Mi
        ports:
        - containerPort: 8079
        env:
        - name: SESSION_REDIS
          value: "true"
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
              - all
          readOnlyRootFilesystem: true
        livenessProbe:
          httpGet:
            path: /
            port: 8079
          initialDelaySeconds: 30
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /
            port: 8079
          initialDelaySeconds: 30
          periodSeconds: 3
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: front-end
  annotations:
    prometheus.io/scrape: 'false'
  labels:
    app: sock-shop
    svc: front-end
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 8079
    nodePort: 30001
  selector:
    app: sock-shop
    svc: front-end
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders
  labels:
    app: sock-shop
    svc: orders
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sock-shop
      svc: orders
  template:
    metadata:
      labels:
        app: sock-shop
        svc: orders
    spec:
      containers:
      - name: orders
        image: weaveworksdemos/orders:0.4.7
        env:
         - name: JAVA_OPTS
           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
        resources:
          #limits:
          #  cpu: 500m
          #  memory: 500Mi
          requests:
            cpu: 100m
            memory: 300Mi
        ports:
        - containerPort: 80
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
              - all
            add:
              - NET_BIND_SERVICE
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: orders
  annotations:
    prometheus.io/scrape: 'false'
  labels:
    app: sock-shop
    svc: orders
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    app: sock-shop
    svc: orders
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders-db
  labels:
    app: sock-shop
    svc: orders-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sock-shop
      svc: orders-db
  template:
    metadata:
      labels:
        app: sock-shop
        svc: orders-db
    spec:
      containers:
      - name: orders-db
        image: mongo
        ports:
        - name: mongo
          containerPort: 27017
        securityContext:
          capabilities:
            drop:
              - all
            add:
              - CHOWN
              - SETGID
              - SETUID
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: orders-db
  labels:
    app: sock-shop
    svc: orders-db
spec:
  ports:
    # the port that this service should serve on
  - port: 27017
    targetPort: 27017
  selector:
    app: sock-shop
    svc: orders-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment
  labels:
    app: sock-shop
    svc: payment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sock-shop
      svc: payment
  template:
    metadata:
      labels:
        app: sock-shop
        svc: payment
    spec:
      containers:
      - name: payment
        image: weaveworksdemos/payment:0.4.3
        resources:
          #limits:
          #  cpu: 200m
          #  memory: 200Mi
          requests:
            cpu: 99m
            memory: 100Mi
        ports:
        - containerPort: 80
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
              - all
            add:
              - NET_BIND_SERVICE
          readOnlyRootFilesystem: true
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 3
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: payment
  annotations:
    prometheus.io/scrape: 'false'
  labels:
    app: sock-shop
    svc: payment
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    app: sock-shop
    svc: payment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: queue-master
  labels:
    app: sock-shop
    svc: queue-master
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sock-shop
      svc: queue-master
  template:
    metadata:
      labels:
        app: sock-shop
        svc: queue-master
    spec:
      containers:
      - name: queue-master
        image: weaveworksdemos/queue-master:0.3.1
        env:
         - name: JAVA_OPTS
           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
        resources:
          #limits:
          #  cpu: 300m
          #  memory: 500Mi
          requests:
            cpu: 100m
            memory: 300Mi
        ports:
        - containerPort: 80
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: queue-master
  annotations:
    prometheus.io/scrape: 'false'
  labels:
    app: sock-shop
    svc: queue-master
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    app: sock-shop
    svc: queue-master
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  labels:
    app: sock-shop
    svc: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sock-shop
      svc: rabbitmq
  template:
    metadata:
      labels:
        app: sock-shop
        svc: rabbitmq
      annotations:
        prometheus.io/scrape: "false"
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3.6.8-management
        ports:
        - containerPort: 15672
          name: management
        - containerPort: 5672
          name: rabbitmq
        securityContext:
          capabilities:
            drop:
              - all
            add:
              - CHOWN
              - SETGID
              - SETUID
              - DAC_OVERRIDE
          readOnlyRootFilesystem: true
      - name: rabbitmq-exporter
        image: kbudde/rabbitmq-exporter
        ports:
        - containerPort: 9090
          name: exporter
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  annotations:
    prometheus.io/scrape: 'false'
    prometheus.io/port: '9090'
  labels:
    app: sock-shop
    svc: rabbitmq
spec:
  ports:
    # the port that this service should serve on
  - port: 5672
    name: rabbitmq
    targetPort: 5672
  - port: 9090
    name: exporter
    targetPort: exporter
    protocol: TCP
  selector:
    app: sock-shop
    svc: rabbitmq
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: session-db
  labels:
    app: sock-shop
    svc: session-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sock-shop
      svc: session-db
  template:
    metadata:
      labels:
        app: sock-shop
        svc: session-db
      annotations:
        prometheus.io.scrape: "false"
    spec:
      containers:
      - name: session-db
        image: redis:alpine
        ports:
        - name: redis
          containerPort: 6379
        securityContext:
          capabilities:
            drop:
              - all
            add:
              - CHOWN
              - SETGID
              - SETUID
          readOnlyRootFilesystem: true
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: session-db
  labels:
    app: sock-shop
    svc: session-db
spec:
  ports:
    # the port that this service should serve on
  - port: 6379
    targetPort: 6379
  selector:
    app: sock-shop
    svc: session-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shipping
  labels:
    app: sock-shop
    svc: shipping
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sock-shop
      svc: shipping
  template:
    metadata:
      labels:
        app: sock-shop
        svc: shipping
    spec:
      containers:
      - name: shipping
        image: weaveworksdemos/shipping:0.4.8
        env:
         - name: ZIPKIN
           value: zipkin.jaeger.svc.cluster.local
         - name: JAVA_OPTS
           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
        resources:
          #limits:
          #  cpu: 300m
          #  memory: 500Mi
          requests:
            cpu: 100m
            memory: 300Mi
        ports:
        - containerPort: 80
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
              - all
            add:
              - NET_BIND_SERVICE
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: shipping
  annotations:
    prometheus.io/scrape: 'false'
  labels:
    app: sock-shop
    svc: shipping
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    app: sock-shop
    svc: shipping

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user
  labels:
    app: sock-shop
    svc: user
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sock-shop
      svc: user
  template:
    metadata:
      labels:
        app: sock-shop
        svc: user
    spec:
      containers:
      - name: user
        image: weaveworksdemos/user:0.4.7
        resources:
          #limits:
          #  cpu: 300m
          #  memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 80
        env:
        - name: mongo
          value: user-db:27017
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
              - all
            add:
              - NET_BIND_SERVICE
          readOnlyRootFilesystem: true
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 3
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: user
  annotations:
    prometheus.io/scrape: 'false'
  labels:
    app: sock-shop
    svc: user
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    app: sock-shop
    svc: user

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-db
  labels:
    app: sock-shop
    svc: user-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sock-shop
      svc: user-db
  template:
    metadata:
      labels:
        app: sock-shop
        svc: user-db
    spec:
      containers:
      - name: user-db
        image: weaveworksdemos/user-db:0.3.0

        ports:
        - name: mongo
          containerPort: 27017
        securityContext:
          capabilities:
            drop:
              - all
            add:
              - CHOWN
              - SETGID
              - SETUID
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
      schedulerName: scheduler-plugins-scheduler
---
apiVersion: v1
kind: Service
metadata:
  name: user-db
  labels:
    app: sock-shop
    svc: user-db
spec:
  ports:
    # the port that this service should serve on
  - port: 27017
    targetPort: 27017
  selector:
    app: sock-shop
    svc: user-db
